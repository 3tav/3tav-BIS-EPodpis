using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace mSignAgent
{
    public partial class Form2 : Form
    {
        private DispatchService _ds;
        private DbPovprasevanja _dal;

        private string _parm;

        public Form2()
        {
            InitializeComponent();
            InitService();
            InitGUI();
        }

        public void InitService()
        {
            InitService(string.Empty);
        }

        public void InitService(string method)
        {
            _ds = new DispatchService();
            _ds.Init();

            _dal = new DbPovprasevanja();
            
        }

        public void InitService(string method, string parm)
        {
            _ds = new DispatchService();
            _ds.Init();
            _parm = parm;           
        }

        public void Init(string method, string parm)
        {
            InitService(method, parm);            
        }

        public void InitGUI()
        {
            var obrazci = _dal.GetVrsteObrazcev();
            inputVrstaObrazca.DisplayMember = "SifraObrazca";
            inputVrstaObrazca.ValueMember = "SifraObrazca";
            inputVrstaObrazca.DataSource = obrazci;
            
        }

        public void DispatchMethod(string method, string arg)
        {
            int id = -1;
            int userId = -1;
            bool remote = true;
            bool flatten = false;
            string filePath = string.Empty;
            string telefon = string.Empty;
            string email = string.Empty;

            string[] args;

            var svc = new mSignAgentLib();


            svc.Init();

            if (method == Methods.CreatePDF) {
                args = arg.Split(';');
                
                try
                {
                    id = Convert.ToInt32(args[0]);
                    flatten = Convert.ToBoolean(args[1]);
                    userId = Convert.ToInt32(args[2]);
                    
                }
                catch (Exception ex)
                {
                    throw new Exception(string.Format("Argument exception: {0}", ex.Message));
                }


                svc.PreviewMerged(id, flatten);
            }
           
            if (method == Methods.MsignSign)
            {
                args = arg.Split(';');

                try
                {
                    id = Convert.ToInt32(args[0]);
                    remote = Convert.ToBoolean(args[1]);
                    userId = Convert.ToInt32(args[2]);

                    telefon =  args[3];
                    email = args[4];
                    

                }
                catch (Exception ex)
                {
                    throw new Exception(string.Format("Argument exception: {0}", ex.Message));
                }

                svc.PogodbaPodpisi(id, remote, userId, telefon, email);
            }

            if (method == Methods.MsignSignFile)
            {
                args = arg.Split(';');

                try
                {
                    id = Convert.ToInt32(args[0]);
                    remote = Convert.ToBoolean(args[1]);
                    userId = Convert.ToInt32(args[2]);
                    filePath = args[3];
                    telefon = args[4];
                    email = args[5];
                }
                catch (Exception ex)
                {
                    throw new Exception(string.Format("Argument exception: {0}", ex.Message));
                }

                svc.PogodbaPodpisi(id, remote, userId, filePath, telefon, email);
            }


            if (method == Methods.MsignStatusRefreshPogodba)
            {
                args = arg.Split(';');

                try
                {
                    id = Convert.ToInt32(args[0]);                   
                    userId = Convert.ToInt32(args[1]);
                     

                }
                catch (Exception ex)
                {
                    throw new Exception(string.Format("Argument exception: {0}", ex.Message));
                }

                svc.RefreshMsignStatusPogodbe(id, userId);
            }
           
        }

        private void button1_Click(object sender, EventArgs e)
        {
            var sifraObrazca = inputVrstaObrazca.SelectedValue.ToString();

            var obrazec = _dal.GetObrazecInfo(sifraObrazca);


            inputTemplate.Text = obrazec.Rows[0]["DokumentPdf"].ToString();
            inputProcedura.Text = obrazec.Rows[0]["StoredProcedura"].ToString();
            inputFileName.Text = obrazec.Rows[0]["IzhodniPdf"].ToString();
        }

        private void button3_Click(object sender, EventArgs e)
        {
            int id = -1;
            int.TryParse(inputID.Text.Trim(), out id);
            if (id == -1)
                return;


            var svc = new mSignAgentLib();
            try
            {
                svc.Init();
                svc.RefreshMsignStatusPogodbe(id, -99);
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
            
        }

        private void btnGenerirajPDF_Click(object sender, EventArgs e)
        {
            var svc = new mSignAgentLib();
            var sifraObrazca = inputVrstaObrazca.SelectedValue.ToString();
            int id = -1;
            int.TryParse(inputID.Text.Trim(), out id);
            if (id == -1)
                return;

            var dir = @"c:\\temp\\";

            try
            {                
                svc.CreatePDF(sifraObrazca, 1, id, inputFileName.Text, dir);
            }
            catch (Exception ex) 
            {
                MessageBox.Show(ex.Message);
            }
           // 
        }

        public void GenerirajPDF(int stevilkaPogodbe) {
            //var svc = new mSignAgentLib();
            //svc.CreatePDF(sifraObrazca, 1, id, inputFileName.Text, dir);

            // dobi obrazce za pogodbo

            // generiraj vse

            // merge 

            // prikaži
        }

        private void btnPreview_Click(object sender, EventArgs e)
        {
            int id = -1;
            int.TryParse(inputID.Text.Trim(), out id);
            if (id == -1)
                return;

            var svc = new mSignAgentLib();
            svc.PreviewMerged(id);
        }

        private void btnPosljiVPodpis_Click(object sender, EventArgs e)
        {
            int id = -1;
            int.TryParse(inputID.Text.Trim(), out id);
            if (id == -1)
                return;

            var svc = new mSignAgentLib();
            svc.PogodbaPodpisi(id, true, -99);
        }

        private void btnCMD_Click(object sender, EventArgs e)
        {
            var cmd = inputCMD.Text;
            cmd = cmd.Replace("\"", "");
            
            try
            {
                var args = cmd.Split(' ');

                InitService();
                DispatchMethod(args[0], args[1]);
            }
            catch (Exception ex) 
            {
                MessageBox.Show(ex.Message);
            }
            
        }

        private void btnChooseFile_Click(object sender, EventArgs e)
        {
            var dialog = new OpenFileDialog();
            dialog.Filter = "PDF Files (*.pdf)|*.pdf";
            dialog.FilterIndex = 1;
            dialog.Multiselect = false;

            if (dialog.ShowDialog() != DialogResult.OK)
                return;

            inputFilePath.Text = dialog.FileName;

        }

        private void btnPosljiVPodpisFile_Click(object sender, EventArgs e)
        {
            int id = -1;
            int.TryParse(inputID.Text.Trim(), out id);
            if (id == -1)
                return;

            var svc = new mSignAgentLib();
            svc.PogodbaPodpisi(id, true, -99, inputFilePath.Text);
        }

        private void button4_Click(object sender, EventArgs e)
        {

        }

       
    }
}
